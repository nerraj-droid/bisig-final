generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "test"]
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Certificate {
  id            String          @id
  purpose       String
  controlNumber String          @unique
  status        String
  issuedDate    DateTime?
  officialId    String
  createdAt     DateTime        @default(now())
  residentId    String
  type          CertificateType
  updatedAt     DateTime
  Officials     Officials       @relation(fields: [officialId], references: [id])
  Resident      Resident        @relation(fields: [residentId], references: [id])

  @@schema("public")
}

model Household {
  id          String         @id
  houseNo     String
  street      String
  barangay    String
  city        String
  province    String
  zipCode     String
  latitude    Float?
  longitude   Float?
  type        HouseholdType @default(SINGLE_FAMILY)
  status      HouseholdStatus @default(ACTIVE)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Resident    Resident[]
  mergedInto  String?       // ID of the household this one was merged into
  mergedFrom  String[]      // IDs of households that were merged into this one
  history     Json[]        // Array of historical changes
  statistics  HouseholdStatistic?

  @@schema("public")
}

model Officials {
  id             String        @id
  punongBarangay String
  secretary      String?
  treasurer      String?
  Certificate    Certificate[]

  @@schema("public")
}

model Resident {
  id                          String            @id
  firstName                   String
  middleName                  String?
  lastName                    String
  birthDate                   DateTime
  gender                      Gender
  civilStatus                 CivilStatus
  contactNo                   String?
  email                       String?
  occupation                  String?
  employmentStatus            String?  @default("EMPLOYED")
  address                     String
  householdId                 String?
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime
  alias                       String?
  bloodType                   String?
  educationalAttainment       String?
  ethnicGroup                 String?
  extensionName               String?
  fatherName                  String?
  fatherMiddleName            String?
  fatherLastName              String?
  motherFirstName             String?
  motherMiddleName            String?
  motherMaidenName            String?
  nationality                 String           @default("Filipino")
  religion                    String?
  userPhoto                   String?
  voterInBarangay             Boolean          @default(false)
  sectors                     String[]
  identityType                String?
  identityNumber              String?
  identityDocumentPath        String?
  Certificate                 Certificate[]
  Household                   Household?       @relation(fields: [householdId], references: [id])
  ReliefRecords              ReliefRecord[]
  BlotterParties             BlotterParty[]

  @@schema("public")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model User {
  id        String    @id
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(SECRETARY)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  status    Status    @default(ACTIVE)
  Account   Account[]
  Session   Session[]

  @@schema("public")
}

enum CertificateType {
  RESIDENCY
  INDIGENCY
  CLEARANCE
  BUSINESS_PERMIT

  @@schema("public")
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  SEPARATED

  @@schema("public")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@schema("public")
}

enum Role {
  SUPER_ADMIN
  CAPTAIN
  SECRETARY
  TREASURER

  @@schema("public")
}

enum Status {
  ACTIVE
  INACTIVE

  @@schema("public")
}

enum HouseholdType {
  SINGLE_FAMILY
  MULTI_FAMILY
  EXTENDED_FAMILY
  SINGLE_PERSON
  NON_FAMILY
  OTHER

  @@schema("public")
}

enum HouseholdStatus {
  ACTIVE
  INACTIVE
  RELOCATED
  MERGED
  ARCHIVED

  @@schema("public")
}

model HouseholdStatistic {
  id             String    @id @default(cuid())
  householdId    String    @unique
  totalResidents Int
  voterCount     Int
  seniorCount    Int
  minorCount     Int
  employedCount  Int
  household      Household @relation(fields: [householdId], references: [id])

  @@schema("public")
}

model ReliefRecord {
    id          String    @id @default(cuid())
    type        String
    amount      Float
    status      String    @default("PENDING")
    notes       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    residentId  String
    resident    Resident  @relation(fields: [residentId], references: [id])

    @@schema("public")
}

// Define the Barangay Information model
model BarangayInfo {
  id            String   @id @default("1") // We'll use a single record approach
  name          String
  district      String?
  city          String
  province      String
  address       String?
  contactNumber String?
  email         String?
  website       String?
  postalCode    String?
  logo          String?  // URL to logo image
  headerImage   String?  // URL to header image
  footerText    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@schema("public")
}

// Define the Council Member model
model CouncilMember {
  id        String   @id @default(cuid())
  name      String
  position  String
  imageUrl  String?
  order     Int      @default(0) // For ordering in the display
  signature String?  // URL to signature image
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("public")
}

// Define the Certificate Template model
model CertificateTemplate {
  id          String   @id @default(cuid())
  type        String   // clearance, residency, business, indigency
  name        String
  content     String   @db.Text // HTML/template content
  headerHtml  String?  @db.Text
  footerHtml  String?  @db.Text
  cssStyles   String?  @db.Text
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([type, isDefault]) // Only one default template per type
  @@schema("public")
}

// Define the Blotter Case model
model BlotterCase {
  id                String               @id @default(cuid())
  caseNumber        String               @unique
  reportDate        DateTime             @default(now())
  incidentDate      DateTime
  incidentTime      String?
  incidentLocation  String
  incidentType      String
  incidentDescription String
  status            BlotterCaseStatus    @default(PENDING)
  priority          BlotterPriority      @default(MEDIUM)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  createdById       String?              // User who created the record
  entertainedBy     String?              // Official who entertained the report
  
  // Relationships
  parties           BlotterParty[]
  hearings          BlotterHearing[]
  statusUpdates     BlotterStatusUpdate[]
  attachments       BlotterAttachment[]

  @@schema("public")
}

// Enum for Blotter case status
enum BlotterCaseStatus {
  PENDING
  ONGOING
  RESOLVED
  ESCALATED

  @@schema("public")
}

// Enum for Blotter case priority
enum BlotterPriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@schema("public")
}

// Party involved in a Blotter case (complainant or respondent)
model BlotterParty {
  id              String          @id @default(cuid())
  blotterCaseId   String
  residentId      String?         // Optional link to registered resident
  partyType       BlotterPartyType
  firstName       String
  middleName      String?
  lastName        String
  address         String
  contactNumber   String?
  email           String?
  isResident      Boolean         @default(false)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relationships
  blotterCase     BlotterCase    @relation(fields: [blotterCaseId], references: [id], onDelete: Cascade)
  resident        Resident?      @relation(fields: [residentId], references: [id])

  @@schema("public")
}

// Enum for party types
enum BlotterPartyType {
  COMPLAINANT
  RESPONDENT
  WITNESS

  @@schema("public")
}

// Hearing/Mediation records for a Blotter case
model BlotterHearing {
  id              String          @id @default(cuid())
  blotterCaseId   String
  date            DateTime
  time            String
  location        String
  status          HearingStatus   @default(SCHEDULED)
  notes           String?
  minutesNotes    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relationships
  blotterCase     BlotterCase    @relation(fields: [blotterCaseId], references: [id], onDelete: Cascade)

  @@schema("public")
}

// Enum for hearing status
enum HearingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED

  @@schema("public")
}

// Status updates for a Blotter case
model BlotterStatusUpdate {
  id              String          @id @default(cuid())
  blotterCaseId   String
  status          BlotterCaseStatus
  notes           String?
  updatedById     String          // User who updated the status
  createdAt       DateTime        @default(now())
  
  // Relationships
  blotterCase     BlotterCase    @relation(fields: [blotterCaseId], references: [id], onDelete: Cascade)

  @@schema("public")
}

// Attachments for a Blotter case
model BlotterAttachment {
  id              String          @id @default(cuid())
  blotterCaseId   String
  name            String
  type            String
  size            String
  path            String          // Path to the stored file
  uploadedById    String          // User who uploaded the file
  createdAt       DateTime        @default(now())
  
  // Relationships
  blotterCase     BlotterCase    @relation(fields: [blotterCaseId], references: [id], onDelete: Cascade)

  @@schema("public")
}

