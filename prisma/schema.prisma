// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "test"]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(SECRETARY)
  status    Status    @default(ACTIVE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]

  @@schema("test")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("test")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("test")
}

model Resident {
  id          String      @id @default(cuid())
  firstName   String
  middleName  String?
  lastName    String
  extensionName String?
  alias       String?
  birthDate   DateTime
  gender      Gender
  civilStatus CivilStatus
  contactNo   String?
  email       String?
  occupation  String?
  educationalAttainment String?
  bloodType   String?
  religion    String?
  ethnicGroup String?
  nationality String      @default("Filipino")
  address     String
  householdId String?
  household   Household?  @relation(fields: [householdId], references: [id])
  userPhoto   String?
  motherMaidenName String?
  motherMiddleName String?
  motherFirstName  String?
  fatherName      String?
  fatherLastName  String?
  fatherMiddleName String?
  familySerialNumber String?
  headOfHousehold Boolean  @default(false)
  familyRole     String?
  voterInBarangay Boolean @default(false)
  votersIdNumber String?
  lastVotingParticipationDate DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  certificates Certificate[]

  @@schema("test")
}

model Household {
  id        String     @id @default(cuid())
  houseNo   String
  street    String
  barangay  String
  city      String
  province  String
  zipCode   String
  latitude  Float?
  longitude Float?
  residents Resident[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@schema("test")
}

model Officials {
  id             String        @id @default(cuid())
  punongBarangay String
  secretary      String?
  treasurer      String?
  certificates   Certificate[] @relation("CertificateOfficials")

  @@schema("test")
}

model Certificate {
  id            String    @id @default(cuid())
  resident      Resident  @relation(fields: [residentId], references: [id])
  residentId    String
  type          CertificateType
  purpose       String
  controlNumber String    @unique
  status        String
  issuedDate    DateTime?
  officials     Officials @relation("CertificateOfficials", fields: [officialId], references: [id])
  officialId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@schema("test")
}

enum Role {
  SUPER_ADMIN
  CAPTAIN
  SECRETARY
  TREASURER

  @@schema("test")
}

enum Status {
  ACTIVE
  INACTIVE

  @@schema("test")
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@schema("test")
}

enum CivilStatus {
  SINGLE
  MARRIED
  WIDOWED
  DIVORCED
  SEPARATED

  @@schema("test")
}

enum CertificateType {
  RESIDENCY
  INDIGENCY
  CLEARANCE
  BUSINESS_PERMIT

  @@schema("test")
}
