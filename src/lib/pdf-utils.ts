import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { format } from "date-fns";
import html2canvas from "html2canvas";

interface CustomJsPDF extends Omit<jsPDF, "line"> {
  lastAutoTable?: {
    finalY: number;
  };
  setLineDash: (array: number[]) => void;
  line: (x1: number, y1: number, x2: number, y2: number) => void;
}

interface GenerateReportPDFProps {
  householdsByBarangay: {
    barangay: string;
    households: number;
    residents: number;
  }[];
  genderDistribution: {
    gender: string;
    count: number;
  }[];
  civilStatusDistribution: {
    civilStatus: string;
    count: number;
  }[];
  ageGroups: {
    range: string;
    count: number;
  }[];
  chartRefs: {
    ref: React.RefObject<HTMLDivElement>;
    name: string;
  }[];
}

export async function generateReportPDF({
  householdsByBarangay,
  genderDistribution,
  civilStatusDistribution,
  ageGroups,
  chartRefs,
}: GenerateReportPDFProps) {
  const doc = new jsPDF() as unknown as CustomJsPDF;
  const timestamp = format(new Date(), "yyyy-MM-dd");

  // Cover Page
  doc.setFillColor(59, 130, 246);
  doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, "F");

  // Title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(32);
  doc.text("Barangay Demographics", doc.internal.pageSize.width / 2, 100, { align: "center" });
  doc.setFontSize(24);
  doc.text("Report", doc.internal.pageSize.width / 2, 120, { align: "center" });

  // Metadata
  doc.setFontSize(12);
  doc.text(
    [
      `Generated on: ${format(new Date(), "MMMM d, yyyy")}`,
      `Time: ${format(new Date(), "h:mm a")}`,
      "Generated by: BISIG",
      "Document Type: Demographics Report",
    ],
    doc.internal.pageSize.width / 2,
    160,
    { align: "center" }
  );

  // Add new page for TOC
  doc.addPage();

  // Header (for all pages except cover)
  doc.setFillColor(59, 130, 246);
  doc.rect(0, 0, doc.internal.pageSize.width, 40, "F");
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text("Barangay Demographics Report", 20, 25);
  doc.setFontSize(12);
  doc.text(`Generated on: ${timestamp}`, 20, 35);
  doc.setTextColor(0, 0, 0);

  // Table of Contents
  doc.setFontSize(16);
  doc.text("Table of Contents", 20, 60);
  doc.setFontSize(12);
  const toc = [
    { title: "1. Summary Statistics", page: 1 },
    { title: "2. Household Distribution", page: 1 },
    { title: "3. Demographics", page: 2 },
    { title: "   3.1 Gender Distribution", page: 2 },
    { title: "   3.2 Civil Status Distribution", page: 2 },
    { title: "   3.3 Age Distribution", page: 2 },
    { title: "4. Visual Analytics", page: 3 },
  ];

  toc.forEach((item, index) => {
    doc.text(item.title, 25, 80 + index * 10);
    doc.text(item.page.toString(), 180, 80 + index * 10);
    doc.setLineDash([1, 1]);
    doc.line(25, 82 + index * 10, 180, 82 + index * 10);
    doc.setLineDash([]);
  });

  // Add new page after TOC
  doc.addPage();

  // Summary Statistics
  const totalHouseholds = householdsByBarangay.reduce((sum, b) => sum + b.households, 0);
  const totalResidents = householdsByBarangay.reduce((sum, b) => sum + b.residents, 0);

  doc.setFontSize(16);
  doc.text("1. Summary Statistics", 20, 20);

  autoTable(doc, {
    startY: 30,
    theme: "grid",
    head: [["Metric", "Value"]],
    body: [
      ["Total Households", totalHouseholds.toString()],
      ["Total Residents", totalResidents.toString()],
      ["Average Household Size", (totalResidents / totalHouseholds).toFixed(1)],
    ],
    styles: {
      fontSize: 12,
      cellPadding: 5,
    },
  });

  // Households by Barangay
  doc.setFontSize(16);
  doc.text("2. Household Distribution", 20, doc.lastAutoTable!.finalY + 20);

  autoTable(doc, {
    startY: doc.lastAutoTable!.finalY + 30,
    theme: "striped",
    head: [["Barangay", "Households", "Residents", "Avg. Size"]],
    body: householdsByBarangay.map((b) => [
      b.barangay,
      b.households,
      b.residents,
      (b.residents / b.households).toFixed(1),
    ]),
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
  });

  // Demographics
  doc.addPage();
  doc.setFontSize(16);
  doc.text("3. Demographics", 20, 20);

  // Gender Distribution
  doc.setFontSize(14);
  doc.text("3.1 Gender Distribution", 20, 40);

  autoTable(doc, {
    startY: 50,
    theme: "grid",
    head: [["Gender", "Count", "Percentage"]],
    body: genderDistribution.map((g) => [g.gender, g.count, `${((g.count / totalResidents) * 100).toFixed(1)}%`]),
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
  });

  // Civil Status Distribution
  doc.setFontSize(14);
  doc.text("3.2 Civil Status Distribution", 20, doc.lastAutoTable!.finalY + 20);

  autoTable(doc, {
    startY: doc.lastAutoTable!.finalY + 30,
    theme: "grid",
    head: [["Civil Status", "Count", "Percentage"]],
    body: civilStatusDistribution.map((c) => [
      c.civilStatus,
      c.count,
      `${((c.count / totalResidents) * 100).toFixed(1)}%`,
    ]),
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
  });

  // Age Distribution
  doc.setFontSize(14);
  doc.text("3.3 Age Distribution", 20, doc.lastAutoTable!.finalY + 20);

  autoTable(doc, {
    startY: doc.lastAutoTable!.finalY + 30,
    theme: "grid",
    head: [["Age Range", "Count", "Percentage"]],
    body: ageGroups.map((a) => [a.range, a.count, `${((a.count / totalResidents) * 100).toFixed(1)}%`]),
    styles: {
      fontSize: 10,
      cellPadding: 5,
    },
  });

  // Charts
  doc.addPage();
  doc.setFontSize(16);
  doc.text("4. Visual Analytics", 20, 20);

  let yPosition = 40;

  for (const { ref, name } of chartRefs) {
    const canvas = ref.current?.querySelector("canvas");
    if (canvas) {
      if (yPosition > 220) {
        doc.addPage();
        yPosition = 20;
      }

      const imgData = canvas.toDataURL("image/png", 1.0);
      doc.addImage(imgData, "PNG", 20, yPosition, 170, 80);
      yPosition += 100;
    }
  }

  // Add footer content to all pages except cover
  const addFooter = (pageNum: number) => {
    const footerHeight = 40; // Height reserved for footer
    const pageHeight = doc.internal.pageSize.height;

    // Check if content is too close to footer
    if (doc.lastAutoTable?.finalY && doc.lastAutoTable.finalY > pageHeight - footerHeight) {
      doc.addPage();
    }

    doc.setPage(pageNum);
    doc.setFontSize(10);

    // Move footer up by footerHeight
    const footerTop = pageHeight - footerHeight;

    // Page number
    doc.setTextColor(128, 128, 128);
    doc.text(`Page ${pageNum - 1} of ${pageCount - 1}`, doc.internal.pageSize.width / 2, footerTop + 10, {
      align: "center",
    });

    // Footer line
    doc.setDrawColor(200, 200, 200);
    doc.line(20, footerTop + 15, doc.internal.pageSize.width - 20, footerTop + 15);

    // Footer text
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);

    // Left side - Confidentiality
    doc.text("CONFIDENTIAL: This document contains sensitive information.", 20, footerTop + 20);

    // Center - Contact
    doc.text("Contact: bisig@example.com | (123) 456-7890", doc.internal.pageSize.width / 2, footerTop + 20, {
      align: "center",
    });

    // Right side - Generated info
    doc.text(
      `Generated: ${format(new Date(), "MM/dd/yyyy h:mm a")}`,
      doc.internal.pageSize.width - 20,
      footerTop + 20,
      { align: "right" }
    );
  };

  // Update footer and watermark for all pages except cover
  const pageCount = doc.getNumberOfPages();
  for (let i = 2; i <= pageCount; i++) {
    // Add watermark
    doc.setPage(i);
    doc.setTextColor(200, 200, 200);
    doc.setFontSize(60);
    doc.text("BISIG", doc.internal.pageSize.width / 2, doc.internal.pageSize.height / 2, {
      align: "center",
      angle: 45,
    });

    // Add footer
    addFooter(i);
  }

  // Save the PDF
  doc.save(`barangay-report-${timestamp}.pdf`);
}

export async function generatePDF(elementId: string, filename: string): Promise<void> {
  try {
    const element = document.getElementById(elementId);
    if (!element) throw new Error("Element not found");

    // Get the dimensions of the element
    const { width, height } = element.getBoundingClientRect();
    const aspectRatio = height / width;

    // Create canvas with proper scaling for high-quality output
    const canvas = await html2canvas(element, {
      scale: 3, // Higher scale for better quality
      useCORS: true,
      logging: false,
      allowTaint: true,
      backgroundColor: "#ffffff",
      // Ensure full rendering of the element
      windowWidth: document.documentElement.offsetWidth,
      windowHeight: document.documentElement.offsetHeight,
    });

    // Calculate dimensions for A4 paper size (210mm Ã— 297mm)
    // with proper margins
    const marginMM = 5; // 5mm margins
    const pageWidth = 210; // A4 width in mm
    const contentWidth = pageWidth - (marginMM * 2);
    
    // Calculate height based on aspect ratio
    const contentHeight = contentWidth * aspectRatio;
    
    // Check if content height exceeds A4 height (297mm)
    const maxContentHeight = 297 - (marginMM * 2);
    const finalContentHeight = Math.min(contentHeight, maxContentHeight);
    
    // Create PDF with proper orientation
    const orientation = aspectRatio > 1 ? "portrait" : "landscape";
    const pdf = new jsPDF({
      orientation,
      unit: "mm",
      format: "a4",
    });

    // Add image with proper positioning
    const imgData = canvas.toDataURL("image/png", 1.0);
    pdf.addImage(imgData, "PNG", marginMM, marginMM, contentWidth, finalContentHeight);

    // Save the PDF
    pdf.save(filename);
  } catch (err) {
    console.error("Error generating PDF:", err);
    throw err;
  }
}
